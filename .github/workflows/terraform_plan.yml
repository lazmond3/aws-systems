name: "Terraform Plan"

on:
  push:
    branches:
      - master
  pull_request:

defaults:
  run:
    working-directory: run


jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: run

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        env:
          TF_VAR_mysql_password: ${{ secrets.TF_VAR_mysql_password }}
        #   TF_VAR_consumer_key: ${{ secrets.TF_VAR_consumer_key }}
        #   TF_VAR_consumer_secret: ${{ secrets.TF_VAR_consumer_secret }}
        #   TF_VAR_mid: ${{ secrets.TF_VAR_mid }}
        #   TF_VAR_sessionid: ${{ secrets.TF_VAR_sessionid }}
        #   TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
          PLAN_ERROR: ${{ steps.plan.outputs.stderr }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commitHash = process.env.GITHUB_SHA;
            const commitHashSubstr = commitHash.substr(0,7);
            const errorLine = `${process.env.PLAN_ERROR}`.trimLeft();
            let output = `#### terraform plan every: ${commitHashSubstr}
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>`;
            if (process.env.PLAN_ERROR) {
              output += `
              <details><summary>Show Plan Error</summary>

              \`\`\`terraform
              ${process.env.PLAN_ERROR}
              \`\`\`

              </details>

              `;
            }
            output += `
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve
        env:
          TF_VAR_mysql_password: ${{ secrets.TF_VAR_mysql_password }}
          # TF_VAR_token: ${{ secrets.TF_VAR_token }}
        #   TF_VAR_consumer_key: ${{ secrets.TF_VAR_consumer_key }}
        #   TF_VAR_consumer_secret: ${{ secrets.TF_VAR_consumer_secret }}
        #   TF_VAR_mid: ${{ secrets.TF_VAR_mid }}
        #   TF_VAR_sessionid: ${{ secrets.TF_VAR_sessionid }}
        #   TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
